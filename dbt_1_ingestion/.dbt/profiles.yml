# This file contains the connection details for your data platform.
# Typically, you would have one profile for each warehouse you use.
# However, dbt supports multiple targets within one profile to encourage the use of separate dev/prod environments.
# Note, for the DuckDB profile you can also specify the schema parameter if you would like to use a schema besides the default (which is called main).

# References (dbt-duckdb):
#   [0] https://github.com/duckdb/dbt-duckdb
#   [1] https://docs.getdbt.com/docs/core/connect-data-platform/duckdb-setup
#   [2] https://docs.getdbt.com/docs/core/connect-data-platform/connection-profiles
#   [3] https://docs.getdbt.com/docs/core/dbt-core-environments
#   [4] https://docs.getdbt.com/docs/running-a-dbt-project/using-threads
#   [5] https://docs.getdbt.com/reference/dbt-jinja-functions/env_var

duckdb_profile:
  
  target: dev # [2] Set 'dev' as the default environment from the profiles you defined below.
  
  outputs:
    dev:
      type: duckdb # [0]
      path: ../databases/dev.duckdb # If you are using path (which is the case for duckdb), then you cannot use the 'database:' tag. The database will automatically get the 'dev' from 'dev.duckdb'
      schema: 'dbt_caio' # [3] Best practices: set your 'dev' target schema to be 'dbt_<username>'. If you have multiple dbt users writing code, it often makes sense for each user to have their own development environment.
      attach: # [0]
        - path: "postgresql://{{ env_var('POSTGRES_USER') }}:{{ env_var('POSTGRES_PASSWORD') }}@{{ env_var('POSTGRES_HOST') }}:{{ env_var('POSTGRES_PORT') | as_number }}/{{ env_var('POSTGRES_DB') }}"
          alias: postgres_db
          type: postgres
      extensions: # [1]
        - httpfs
        - parquet
      settings:   # [1]
        s3_region: "{{ env_var('S3_REGION') }}"
        s3_access_key_id: "{{ env_var('S3_ACCESS_KEY_ID') }}"          # [5]
        s3_secret_access_key: "{{ env_var('S3_SECRET_ACCESS_KEY') }}"  # [5]
      threads: 4  # [4]