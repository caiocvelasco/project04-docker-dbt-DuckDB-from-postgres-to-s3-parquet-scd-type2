# Create a custom network for bridging the containers
networks:
  etl_network:
    driver: bridge

# Create the services, i.e., the containers with their specific services inside (postgres, python, jupyter)
services:  
  postgres:
    image: postgres:16 # The postgres service is using the "postgres:16" (check in cmd: docker ps)
    container_name: postgres
    restart: unless-stopped
    env_file:
      - ./.env
    ports:
      - "5432:5432"
    expose:
      - "5432" # This makes the PostgreSQL service accessible via localhost:5432 on your local machine. However, within the container environment, services will use the postgres hostname as specified. For example, for PowerBI, Since Docker exposes port 5432 of the PostgreSQL container to port 5432 on your host machine, you connect to localhost:5432 when using PowerBI Desktop on your local machine.
    volumes:
      - pgdata:/var/lib/postgresql/data # This volume specifies the postgres storage path
      #  - ~/.ssh:/root/.ssh  # Mount SSH directory into the container
    networks:
      - etl_network

  dbt:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: dbt
    env_file:
      - ./.env
    volumes:
      - .:/workspace                               # This mounts the entire project directory ('.') into the container at the /workspace directory. It allows the container to have access to all the files and subdirectories in your project, such as your DBT files, configurations, and any other code.
      - ./dbt_1_ingestion/.dbt:/root/.dbt          # This mounts the .dbt directory specific to dbt_1_ingestion into the container's root user's home directory (/root/.dbt)
      - /var/run/docker.sock:/var/run/docker.sock  # Bind Docker socket to enable Docker commands within the container. This enable the "docker prune" command from devcontainer.json to work when rebuilding docker.
      #  - ~/.ssh:/root/.ssh
    working_dir: /workspace
    depends_on:
      - postgres # Name of the service/image that is build before, generating dependency
    stdin_open: true # Allow an interactive terminal session
    tty: true # Allow an interactive terminal session
    command: sleep infinity  # Add this line to keep the container running
    networks:
      - etl_network
          
  jupyter_notebook:
      image: jupyter/minimal-notebook
      container_name: jupyter_notebook
      restart: unless-stopped
      env_file:
        - ./.env
      ports:
        - "8888:8888"
      volumes:
        - .:/workspace
        #  - ~/.ssh:/root/.ssh  # Mount SSH directory into the container
      working_dir: /workspace # Explicitly set the working directory for the Jupyter Notebook service to /workspace. Thus, os.getcwd() should return /workspace when executed within the Jupyter Notebook environment.
      depends_on:
        - postgres
        - dbt
      networks:
        - etl_network

volumes:
  pgdata:

  # Note: Since dbt can also run Python code, having a separate python service is redundant.
